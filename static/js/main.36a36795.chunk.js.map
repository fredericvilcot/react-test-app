{"version":3,"sources":["counterFunction.js","counterClass.js","App.js","serviceWorker.js","index.js"],"names":["CounterFunction","maxCount","minCount","useState","count","setCount","hasError","setHasError","useEffect","useLayoutEffect","Fragment","className","onClick","type","CounterClass","props","componentDidMount","setState","componentDidUpdate","prevProps","handleIncrement","state","handleDecrement","handleReset","this","PureComponent","App","min","setMin","max","setMax","id","onChange","event","Number","target","value","style","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.36a36795.chunk.js","sourcesContent":["import React, { useEffect, useLayoutEffect, useState } from \"react\";\n\nimport \"./counter.css\";\n\nexport const CounterFunction = ({ maxCount, minCount }) => {\n  const [count, setCount] = useState(0);\n  const [hasError, setHasError] = useState(false);\n\n  const handleIncrement = () => {\n    if (count < maxCount) {\n      setCount(count + 1);\n      setHasError(false);\n    } else {\n      setHasError(true);\n    }\n  };\n\n  const handleDecrement = () => {\n    if (count > minCount) {\n      setCount(count - 1);\n      setHasError(false);\n    } else {\n      setHasError(true);\n    }\n  };\n\n  const handleReset = () => {\n    setCount(minCount);\n    setHasError(false);\n  };\n\n  useEffect(() => {\n    setCount(7777777777);\n    return () => {\n      setCount(0);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    setCount(minCount);\n  }, [minCount]);\n\n  return (\n    <React.Fragment>\n      <div className=\"counter\">\n        <p className=\"counter-title\">{count}</p>\n        <div className=\"counter-actions-container\">\n          <button\n            className=\"counter-action\"\n            onClick={handleIncrement}\n            type=\"button\"\n          >\n            Increment\n          </button>\n          <button\n            className=\"counter-action\"\n            onClick={handleDecrement}\n            type=\"button\"\n          >\n            Decrement\n          </button>\n          <button\n            className=\"counter-action\"\n            onClick={handleReset}\n            type=\"button\"\n          >\n            Reset\n          </button>\n        </div>\n      </div>\n\n      <div className=\"counter-error-message\">\n        {hasError && (\n          <span>{`Hey Dude tou can't go above ${maxCount} or less than ${minCount}`}</span>\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n","import React, { PureComponent } from \"react\";\n\nexport default class CounterClass extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: 0,\n      hasError: false,\n    };\n  }\n\n  componentDidMount = () => {\n    this.setState({ count: 7777777777 });\n  };\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.minCount !== this.props.minCount) {\n      this.setState({ count: this.props.minCount ?? 0 });\n    }\n  };\n\n  handleIncrement = () => {\n    const { count } = this.state;\n    const { maxCount } = this.props;\n    if (count < maxCount) {\n      this.setState({ count: count + 1, hasError: false });\n    } else {\n      this.setState({ hasError: true });\n    }\n  };\n\n  handleDecrement = () => {\n    const { count } = this.state;\n    const { minCount } = this.props;\n    if (count > minCount) {\n      this.setState({ count: count - 1, hasError: false });\n    } else {\n      this.setState({ hasError: true });\n    }\n  };\n\n  handleReset = () => {\n    this.setState({ count: this.props.minCount, hasError: false });\n  };\n\n  render() {\n    const { hasError, count } = this.state;\n    return (\n      <React.Fragment>\n        <div className=\"counter\">\n          <p className=\"counter-title\">{count}</p>\n          <div className=\"counter-actions-container\">\n            <button\n              className=\"counter-action\"\n              onClick={this.handleIncrement}\n              type=\"button\"\n            >\n              Increment\n            </button>\n            <button\n              className=\"counter-action\"\n              onClick={this.handleDecrement}\n              type=\"button\"\n            >\n              Decrement\n            </button>\n            <button\n              className=\"counter-action\"\n              onClick={this.handleReset}\n              type=\"button\"\n            >\n              Reset\n            </button>\n          </div>\n        </div>\n\n        <div className=\"counter-error-message\">\n          {hasError && (\n            <span>{`Hey Dude you can't go above ${this.props.maxCount} or less than ${this.props.minCount} ...`}</span>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React, { useState } from \"react\";\nimport { CounterFunction } from \"./counterFunction\";\nimport CounterClass from \"./counterClass\";\nimport \"./App.css\";\n\nfunction App() {\n  const [min, setMin] = useState(0);\n  const [max, setMax] = useState(0);\n  return (\n    <div className=\"App\">\n      <div className=\"app-header\">\n        <h1 className=\"app-header-title\">Test React Ubleam</h1>\n        <span className=\"app-header-label\">Waouhhhh what cuty counters !</span>\n      </div>\n      <div className=\"app-inputs-container\">\n        <label>\n          Choose a maximum number for this counter :\n          <input\n            id=\"counter-max-prop\"\n            className=\"app-input\"\n            onChange={(event) => setMax(Number(event.target.value))}\n          />\n        </label>\n        <label>\n          Choose a minimum number for this counter :\n          <input\n            id=\"counter-min-prop\"\n            className=\"app-input\"\n            onChange={(event) => setMin(Number(event.target.value))}\n          />\n        </label>\n      </div>\n      <div style={{ marginTop: \"80px\" }}>\n        <CounterFunction maxCount={max} minCount={min} />\n        <CounterClass maxCount={max} minCount={min} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}